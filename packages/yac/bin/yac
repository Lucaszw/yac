#!/usr/bin/env node
const path = require('path');
const {spawnSync} = require('child_process');

const yac = require('@yac/api');

const CWD = (argv) => {
  if (argv.cwd == undefined) { argv.cwd = process.cwd(); }
  return path.resolve(argv.cwd);
}

const YACFILE = (argv) => {
  if (argv.useEnvVariable == true) argv.yacfile = process.env["YAC_FILE"];
  return argv.yacfile;
}

const argv = require('yargs')
  .option('cwd', {
    describe: 'change directory of execution',
    type: 'string'
  })
  .option('yacfile', {
    describe: 'path to yacinfo.json file',
    type: 'string'
  })
  .option('use-env-variable', {
    describe: 'use environment variable (YAC_FILE) for yacfile location',
    type: 'boolean'
  })
  .option('channel', {
    describe: 'channel name to pass with yac add (for conda packages)',
    type: 'string'
  })
  .command('conda-info', 'show active conda', () => {}, (argv) => {
    spawnSync('conda info', [], {stdio: 'inherit', shell: true});
  })
  .command('init', 'initialize a yac project', () => {}, (argv) => {
    yac.init(CWD(argv));
  })
  .command('install', 'install dependencies', () => {}, (argv) => {
    yac.install(CWD(argv));
  })
  .command('exec <cmd>', 'execute command inside yac environment', () => {}, (argv) => {
    yac.exec(CWD(argv), argv.cmd);
  })
  .command('add <packageName> [type]', 'add package through conda or pip', () => {}, (argv) => {
    if (argv.type == undefined) argv.type = 'conda';
    yac.add(CWD(argv), argv.packageName, argv.type, argv.channel);
  })
  .command('remove <packageName> [type]', 'remove package through conda or pip', () => {}, (argv) => {
    if (argv.type == undefined) argv.type = 'conda';
    yac.remove(CWD(argv), argv.packageName, argv.type);
  })
  .command('dev <packageLocation> [packageName]', 'link local package', () => {}, (argv) => {
    if (argv.packageName == undefined) argv.packageName = path.basename(packageLocation);
    yac.dev(CWD(argv), argv.packageLocation, argv.packageName);
  })
  .command('undev <packageLocation>', 'unlink local package', () => {}, (argv) => {
    yac.undev(CWD(argv), argv.packageLocation);
  })
  .command('track', 'track a yac package', () => {}, (argv) => {
    if (argv.yacfile != undefined) yac.track.setFileLocation(YACFILE(argv));
    yac.track.add(CWD(argv));
  })
  .command('untrack', 'untrack a yac package', () => {}, (argv) => {
    yac.untrack(CWD(argv), YACFILE(argv));
  })
  .command('list', 'list yac packages', () => {}, (argv) => {
    yac.list(CWD(argv), YACFILE(argv));
  })
  .command('dashboard', 'start dashboard for managing yac packages', () => {}, (argv) => {
    yac.dashboard(CWD(argv), undefined, YACFILE(argv));
  })
  .command('autostart <packageName> [packageLocation]', 'auto start yac project with dashboard', () => {}, (argv) => {
    yac.autostart(argv.packageName, argv.packageLocation, YACFILE(argv));
  })
  .command('autostart-remove <packageName> [packageLocation]', 'remove package from autostart', () => {}, (argv) => {
    yac.autostartRemove(argv.packageName, argv.packageLocation, YACFILE(argv));
  })
.argv;
