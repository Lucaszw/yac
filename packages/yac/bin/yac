#!/usr/bin/env node
const path = require('path');
const {spawnSync} = require('child_process');

const yacInit = require('@yac/init');
const yacInstall = require('@yac/install');
const yacExec = require('@yac/exec');
const yacAdd = require('@yac/add');
const yacDev = require('@yac/dev');
const yacUndev = require('@yac/undev');
const yacRemove = require('@yac/remove');
const yacTrack = require('@yac/track');

const CWD = (argv) => {
  if (argv.cwd == undefined) { argv.cwd = process.cwd(); }
  return path.resolve(argv.cwd);
}

const argv = require('yargs')
  .option('cwd', {
    describe: 'change directory of execution',
    type: 'string'
  })
  .command('conda-info', 'show active conda', () => {}, (argv) => {
    spawnSync('conda info', [], {stdio: 'inherit', shell: true});
  })
  .command('init', 'initialize a yac project', () => {}, (argv) => {
    yacInit(CWD(argv));
  })
  .command('install', 'install dependencies', () => {}, (argv) => {
    yacInstall(CWD(argv));
  })
  .command('exec <cmd>', 'execute command inside yac environment', () => {}, (argv) => {
    yacExec(CWD(argv), argv.cmd);
  })
  .command('add <packageName> [type]', 'add package through conda or pip', () => {}, (argv) => {
    if (argv.type == undefined) argv.type = 'conda';
    yacAdd(CWD(argv), argv.packageName, argv.type);
  })
  .command('remove <packageName> [type]', 'remove package through conda or pip', () => {}, (argv) => {
    if (argv.type == undefined) argv.type = 'conda';
    yacRemove(CWD(argv), argv.packageName, argv.type);
  })
  .command('dev <packageLocation> [packageName]', 'link local package', () => {}, (argv) => {
    if (argv.packageName == undefined) argv.packageName = path.basename(packageLocation);
    yacDev(CWD(argv), argv.packageLocation, argv.packageName);
  })
  .command('undev <packageLocation>', 'unlink local package', () => {}, (argv) => {
    yacUndev(CWD(argv), argv.packageLocation);
  })
  .command('track', 'track yac package', () => {}, (argv) => {
    yacTrack(CWD(argv));
  })
.argv;
